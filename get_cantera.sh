#!/usr/bin/env bash

###############################################################################
# Download paths for Sundials and Cantera
###############################################################################

cantera_page="https://github.com/Cantera/cantera.git"
sundials_page="https://computation.llnl.gov/projects/sundials/download"

###############################################################################
# Libraries versions and files
###############################################################################

cantera_version="2.4.0"
sundials_version="2.7.0"
sundials_file="sundials-${sundials_version}.tar.gz"

###############################################################################
# Absolute path definitions
###############################################################################

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

makefile_in="${DIR}/Makefile.in"
external_dir="${DIR}/external"
cantera_dir="${external_dir}/cantera"
sundials_dir="${cantera_dir}/sundials"

###############################################################################
# Retrieve and compile Sundials
#
# FOR 3.1.0 IN THE FUTURE!
# cmake \
#     -DCMAKE_INSTALL_PREFIX="$1" \
#     -DSUNDIALS_INDEX_TYPE="int32_t" \
#     -DBLAS_ENABLE="ON" \
#     -DLAPACK_ENABLE="ON" \
#     -DBLAS_LIBRARIES="${blas}" \
#     -DLAPACK_LIBRARIES="${blas}" \
#     -DCMAKE_C_FLAGS="-fPIC -O3" \
#     "../sundials-${sundials_version}"
###############################################################################

function get_sundials()
{
    prefix=$1

    if [[ -f "${prefix}/lib/libsundials_ida.a" ]]; then
        echo "************************************************************"
        echo "Found Sundials already installed"
        return
    fi

    echo "****************************************************************"
    echo "Trying to retrieve Sundials ${sundials_file}"

    if [[ ! -f "${sundials_file}" ]]; then
        wget "${sundials_page}/${sundials_file}"
        tar xzf "${sundials_file}"
    fi

    echo "****************************************************************"
    echo "Moving to Sundials 'builddir' ${sundials_dir}"

    if [[ -d "${sundials_dir}" ]]; then
        rm -rf "${sundials_dir}"
    fi

    mkdir "${sundials_dir}"
    cd "${sundials_dir}"

    echo "****************************************************************"
    echo "Configuring Sundials for $2"

    if [[ "$2" == "Nix" ]]; then
        blas_toggle="ON"
        blas=$(ldconfig -p | grep openblas | tail -1 | awk '{ print $4 }')
    else
        blas_toggle="OFF"
        blas=""
    fi

    echo "****************************************************************"
    echo "Generating Sundials make files"

    # NOTE: examples are incompatible with Cygwin.

    cmake \
        -DCMAKE_INSTALL_PREFIX="$1" \
        -DEXAMPLES_ENABLE="OFF" \
        -DLAPACK_ENABLE="${blas_toggle}" \
        -DLAPACK_LIBRARIES="${blas}" \
        -DCMAKE_C_FLAGS="-fPIC -O3 --std=c99" \
        -DBUILD_ARKODE="OFF" \
        -DBUILD_KINSOL="OFF" \
        -DBUILD_SHARED_LIBRARIES="OFF" \
        -DBUILD_STATIC_LIBRARIES="ON" \
        "../sundials-${sundials_version}"

    echo "****************************************************************"
    echo "Building Sundials"

    make install;
    cd "${cantera_dir}"
}

###############################################################################
# Cygwin specific steps (Linux users must do manually!)
# https://github.com/FPGAwars/apio/issues/143
###############################################################################

function cygwin_helper()
{
    export PATH="~/.local/bin:${PATH}"
    export SCONS_LIB_DIR="~/.local/lib/python3.6/site-packages/scons-3.0.1"

    /usr/bin/pip3 install --upgrade pip
    /usr/bin/pip3 install --user scons
    /usr/bin/pip3 install --user Cython
    /usr/bin/pip3 install --user matplotlib
    /usr/bin/pip3 install --user pandas
    sed -i "s|#! /usr/bin/env python|#! /usr/bin/env python3|g" ~/.local/bin/scons
}

###############################################################################
# Default build steps
###############################################################################

function header()
{
    machine_os=$1
    prefix=$2
    cxx_flags=$3

    echo "****************************************************************"
    echo "Running from ${machine_os}"
    echo "Installing to ${prefix}"

    if [[ "${machine_os}" == "Nix" ]]; then
        shared="_shared"
        openblas="-lopenblas"
        python="python"
    else
        shared=""
        openblas=""
        python="python3"
    fi

    echo "****************************************************************"
    echo "Creating ${makefile_in}"

    echo "# File generated by get_cantera.sh." > ${makefile_in}
    echo "PYTHON       := ${python}" >> ${makefile_in}
    echo "OPTIONS      := ${cxx_flags}" >> ${makefile_in}
    echo "BLAS_LAPACK  := ${openblas}" >> ${makefile_in}
    echo "LIB_SUNDIALS := -L${prefix}/lib -lsundials_ida -lsundials_nvecserial" >> ${makefile_in}
    echo "INC_SUNDIALS := -I${prefix}/include" >> ${makefile_in}
    echo "LIB_CANTERA  := -L${prefix}/lib -lcantera${shared}" >> ${makefile_in}
    echo "INC_CANTERA  := -I${prefix}/include" >> ${makefile_in}
    echo "LIB_SELF     := -LCanteraPFR/lib" >> ${makefile_in}
    echo "INC_SELF     := -ICanteraPFR/include" >> ${makefile_in}
    echo "LIBRARIES    := \$(LIB_CANTERA) \$(LIB_SUNDIALS) \$(LIB_SELF) \$(BLAS_LAPACK)" >> ${makefile_in}
    echo "INCLUDES     := \$(INC_CANTERA) \$(INC_SUNDIALS) \$(INC_SELF)" >> ${makefile_in}

    echo "****************************************************************"
    echo "Appending ~/.bashrc"
    echo ${LD_LIBRARY_PATH} | grep -q "${prefix}"

    if [[ "$?" != "0" ]]; then
        echo "export LD_LIBRARY_PATH=\"${prefix}/lib:\${LD_LIBRARY_PATH}\"" >> ~/.bashrc
    else
        echo "Already in LD_LIBRARY_PATH: ${prefix}"
    fi

    echo "source ${prefix}/bin/setup_cantera" >> ~/.bashrc

    get_sundials "${prefix}" "${machine_os}"

}

###############################################################################
# Nix build
###############################################################################

function build_on_nix()
{
    machine_os=Nix
    prefix="${external_dir}/${machine_os}"
    cxx_flags="-g -O3 -std=c++11"

    header "${machine_os}" "${prefix}" "${cxx_flags}"

    scons clean
    scons build \
      prefix=${prefix} \
      python_package="none" \
      python3_package="full" \
      f90_interface="y" \
      googletest="submodule" \
      system_eigen="n" \
      system_fmt="n" \
      system_sundials="y" \
      sundials_include="${prefix}/include" \
      sundials_libdir="${prefix}/lib" \
      blas_lapack_libs="openblas" \
      cxx_flags="${cxx_flags}";
}

###############################################################################
# Win build
###############################################################################

function build_on_win()
{
    machine_os=Win
    prefix="${external_dir}/${machine_os}"
    cxx_flags="-g -O3 -std=c++11 -U__STRICT_ANSI__"

    header "${machine_os}" "${prefix}" "${cxx_flags}"
    cygwin_helper

    scons clean
    scons build \
      prefix=${prefix} \
      python_package="none" \
      python3_package="full" \
      f90_interface="y" \
      googletest="submodule" \
      system_eigen="n" \
      system_fmt="n" \
      system_sundials="y" \
      sundials_include="${prefix}/include" \
      sundials_libdir="${prefix}/lib" \
      cxx_flags="${cxx_flags}";
      # FIXME path to blas_lapack_libs="openblas" \
}

###############################################################################
# Main install routine
###############################################################################

function get_cantera()
{
    uname_out="$(uname -s)"

    echo "****************************************************************"
    echo "Trying to retrieve Cantera"
    if [[ ! -d ${external_dir} ]]; then
        mkdir ${external_dir}
    fi

    cd ${external_dir}

    if [[ ! -d ${cantera_dir} ]]; then
        git clone --recursive ${cantera_page}
    fi

    cd ${cantera_dir}
    git checkout tags/v${cantera_version}
    git submodule update

    echo "****************************************************************"
    echo "Starting build"

    case "${uname_out}" in
        Linux*|Darwin*)
            build_on_nix;
            ;;
        CYGWIN*|MINGW*)
            build_on_win;
            ;;
        *)
            echo "Unsupported system: ${uname_out}"
            exit -1
    esac

    scons test;
    scons install;

    echo "Now run 'source ~/.bashrc' to refresh environment"
}

###############################################################################
# Call main install routine
###############################################################################

get_cantera

###############################################################################
# EOF
###############################################################################
